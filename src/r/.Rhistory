}
n <- npoints(testset$X[[i]]) # fix intensity!
par(mfrow=c(3,4), mar=c(1,1,1,1))
plot(testset$X[[i]], main="Observed pattern", cols="green")
plot(testset$cytoplasms[[i]], add=TRUE)
for (j in 1:11) {
sim <- rmh(model = adaptedmodel,
start = list(n.start = n),
control = list(p = 1),
verbose=FALSE)
plot(sim, main="Simulated pattern", cols="red")
plot(testset$cytoplasms[[i]], add=TRUE)
}
mtext("Simulated patterns from point process model fitted to patterns of other cells", outer=TRUE, cex=1.5)
par(mfrow=c(5,10), mar=c(1,1,1,1))
plot(testset$X[[i]], main="Observed", cols="green")
plot(testset$cytoplasms[[i]], add=TRUE)
for (j in 1:49) {
sim <- rmh(model = adaptedmodel,
start = list(n.start = n),
control = list(p = 1),
verbose=FALSE)
plot(sim, main="Simulated", cols="red")
plot(testset$cytoplasms[[i]], add=TRUE)
}
Lpp <- envelope(testset$X[[i]],
Linhom,  nsim = 100, global = TRUE, lambda = cifim,
simulate = expression(rmh(model = adaptedmodel,
start = list(n.start = n),
control = list(p = 1),
verbose=FALSE)))
plot(Lpp, main="Observed vs. simulated patterns (Gibbs model)")
par(mfrow=c(1,1))
Lpp
plot(Lpp)
par(mfrow=c(1,1), mar=c(4,4,4,4))
plot(Lpp, main="Observed vs. simulated patterns (Gibbs model)")
par(mfrow=c(1,1), mar=c(4,4,1,1))
plot(Lpp, main="Observed vs. simulated patterns (Gibbs model)")
par(mfrow=c(1,1), mar=c(4,4,2,1))
plot(Lpp, main="Observed vs. simulated patterns (Gibbs model)")
par(mfrow=c(1,1), mar=c(5,5,2,1))
plot(Lpp, main="Observed vs. simulated patterns (Gibbs model)")
par(mfrow=c(1,1), mar=c(5,5,2,2))
plot(Lpp, main="Observed vs. simulated patterns (Gibbs model)")
model <- "~ compartment + distance1 + distance2 + protein"
as.formula(paste("pattern ", model))
area.owin(testset$cells[[i]])
area.owin(testset$cells[-1])
area.owin(testset$cells[-2])
area.owin(testset$cells[c(1,2)])
lapply(testset$cells[c(1,2)], area.owin)
trainingset <- testset
model <- "~ compartment + distance1 + distance2 + protein + area"
fittedmodel <- mppm(as.formula(paste("pattern ", model)),
data = getcovariates.mppm(trainingset, -ix_sampled),  # explanatory variables for spatial trend
interaction = AreaInter(r),  # interpoint interaction
correction = "none")  # finite, bounded point process confined to the cell
fittedmodel <- mppm(as.formula(paste("pattern ", model)),
data = getcovariates.mppm(trainingset),  # explanatory variables for spatial trend
interaction = AreaInter(r),  # interpoint interaction
correction = "none")  # finite, bounded point process confined to the cell
source("/Users/Markus/Desktop/Courses/StatMethAnalMicroSeq/Project/code/ProjectFunctions.R")
fittedmodel <- mppm(as.formula(paste("pattern ", model)),
data = getcovariates.mppm(trainingset),  # explanatory variables for spatial trend
interaction = AreaInter(r),  # interpoint interaction
correction = "none")  # finite, bounded point process confined to the cell
predicted <- predict.mppm.fixed(fittedmodel, newdata = getcovariates.mppm(testset, i))
# Extract predicted images
trendim <- predicted[1, "trend", drop=TRUE]
cifim <- predicted[1, "cif", drop=TRUE]
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(testset$X[[i]], main="Observed pattern", cols="red")
plot(testset$cytoplasms[[i]], add=TRUE)
plot(density(testset$X[[i]], 10), main="Observed intensity")
plot(testset$X[[i]], add=TRUE, cols="red")
plot(cifim, main="Predicted conditional intensity")
plot(testset$X[[i]], add=TRUE, cols="red")
plot(trendim, main="Predicted spatial trend")
plot(testset$X[[i]], add=TRUE, cols="red")
fardist(testset$X[[i]])
fardist(testset$cells[[i]])
plot(fardist(testset$cells[[i]]))
folder = 'Users/Markus/shares/ethz-share7/Data/Users/RNAFish/ANALYSIS/131107_MakeVersionedCPDatasetsInH5/HeLa')
filename = file.path(strLookupPath, 'Measurements_Cells_AreaShape.h5')
folder = 'Users/Markus/shares/ethz-share7/Data/Users/RNAFish/ANALYSIS/131107_MakeVersionedCPDatasetsInH5/HeLa'
filename = file.path(strLookupPath, 'Measurements_Cells_AreaShape.h5')
filename = file.path(folder, 'Measurements_Cells_AreaShape.h5')
wellid
h5read(filename, wellid, "/matMeasurements_Cells_AreaShapeData")
folder = "/Users/Markus/shares/ethz-share7/Data/Users/RNAFish/ANALYSIS/131107_MakeVersionedCPDatasetsInH5/HeLa"
filename = file.path(folder, "Measurements_Cells_AreaShape.h5")
h5read(filename, wellid, "/matMeasurements_Cells_AreaShapeData")
h5read(filename, wellid, "/matMeasurements_Cells_AreaShapeData", index = list(NULL,1))
h5read(filename, wellid, "/matMeasurements_Cells_AreaShapeData", index = list(1,NULL))
wellid
h5read(filename, wellid, "matMeasurements_Cells_AreaShapeData", index = list(1,NULL))
h5read(filename, wellid, "matMeasurements_Cells_AreaShapeData")
features <- h5read(filename, wellid, "matMeasurements_Cells_AreaShapeData")
features <- h5read(filename, file.path(wellid, "matMeasurements_Cells_AreaShapeData"), "matMeasurements_Cells_AreaShapeData")
file.path(wellid, "matMeasurements_Cells_AreaShapeData")
features <- h5read(filename, file.path(wellid, "matMeasurements_Cells_AreaShapeData"), "matMeasurements_Cells_AreaShapeData")
features <- h5read(filename, file.path(wellid, "matMeasurements_Cells_AreaShapeData"))
features <- h5read(filename, file.path(wellid, "matMeasurements_Cells_AreaShapeData"), index = list(NULL,1))
fid <- H5Fopen(filename)
H5Fclose(fid)
H5close()
fid <- H5Fopen(filename)
features <- h5read(fid, file.path(wellid, "matMeasurements_Cells_AreaShapeData"), index = list(1,NULL))
header <- list(area=1, eccentricity=2, solidity=3, formfactor=7)
header$area
solidity <- h5read(fid, file.path(wellid, "matMeasurements_Cells_AreaShapeData"), index = list(header$solidity, 2))
source("/Users/Markus/Desktop/Courses/StatMethAnalMicroSeq/Project/code/ProjectFunctions.R")
model <- "~ ."
getcovariates.mppm(trainingset)
source("/Users/Markus/Desktop/Courses/StatMethAnalMicroSeq/Project/code/ProjectFunctions.R")
source("/Users/Markus/Desktop/Courses/StatMethAnalMicroSeq/Project/code/ProjectFunctions.R")
trainingset <- loadHDF5(hdf5_filename, n = 5)
getcovariates.mppm(trainingset)
source("/Users/Markus/Desktop/Courses/StatMethAnalMicroSeq/Project/code/ProjectFunctions.R")
trainingset <- loadHDF5(hdf5_filename, n = 5)
getcovariates.mppm(trainingset)
(use warnings()
use warnings()
trainingset <- loadHDF5(hdf5_filename, n = 5)
use warnings()
warnings()
source("/Users/Markus/Desktop/Courses/StatMethAnalMicroSeq/Project/code/ProjectFunctions.R")
trainingset <- loadHDF5(hdf5_filename, n = 5)
getcovariates.mppm(trainingset)
source("/Users/Markus/Desktop/Courses/StatMethAnalMicroSeq/Project/code/ProjectFunctions.R")
hdf5_filename = file.path(project, 'preprocessed_data_dhf5', "T101r1aaR13C20.h5")
trainingset <- loadHDF5(hdf5_filename, n = 5)
hdf5_filename = file.path(project, 'preprocessed_data_hdf5', "T101r1aaR13C20.h5")
trainingset <- loadHDF5(hdf5_filename, n = 5)
getcovariates.mppm(trainingset)
repo_path = "/Users/Markus/Documents/PointProcessData"
wellid <- "T102r1aaR07C04"
# Load the training dataset
nTrain <- 50
hdf5_file <- file.path(repo_path, "preprocessed", sprintf("%s.h5", wellid))
H5Close()
library(rhdf5)
H5Close()
H5close()
# Define the gene
wellid <- "T102r1aaR07C04"
# Load the training dataset
nTrain <- 50
hdf5_file <- file.path(repo_path, "preprocessed", sprintf("%s.h5", wellid))
trainingset <- lsd(hdf5_file, nTrain)
#' Load spot data. Loads preprocessed data from HDF5 file and creates corresponding spatstat objects.
#'
#' @param hdf5_file A string of the absolute path to the HDF5 file.
#' @param n Integer specifying the number of cells that should be loaded.
#' @return A list containing all the relevant spatstat objects for fitting an mppm model.
lsd <- function(hdf5_file, n=NULL) {
require(rhdf5)
require(spatstat)
source(file.path("code", "h5readatt.R"))
wellid <- gsub(".*/([^/]+)\\.h5$", '\\1', hdf5_file)
fid <- H5Fopen(hdf5_file)
# List groups in HDF5 file
hdf5_groups <- unique(h5ls(fid, datasetinfo=FALSE)[1])
# Get indices of relevant groups (those which contain the datasets of interest)
group_index <- sapply(hdf5_groups, function(x) grep("/Cell", x), simplify=TRUE)
hdf5_groups <- hdf5_groups[group_index]
if (is.null(n)) {
# Permute
cell_index <-  sample(1:length(hdf5_groups))
cat(sprintf("lsd: loading all %d cells for gene \'%s\': \n", length(cell_index), wellid))
}
else {
# Sample
cell_index <- sample(length(hdf5_groups), n)
cat(sprintf("lsd: loading %d randomly sampled cells for gene \'%s\': \n", length(cell_index), wellid))
}
hdf5_groups <- hdf5_groups[cell_index]
cells <- nuclei <- cytoplasms <- compartments <- X <- celltraces <- vector("list", length(hdf5_groups))
cellid <- formfactor <- eccentricity <- solidity <- vector("numeric", length(hdf5_groups))
for (group in 1:length(hdf5_groups)) {
## Load spot data form HDF5 file
## -----------------------------
hdf5_location <- hdf5_groups[group]
cat(sprintf("lsd: loading \'%s\' \n", hdf5_location))
# Coordinates of spots
spot_locations <- h5read(fid, file.path(hdf5_location, "SpotLocation"))
colnames(spot_locations) <- h5readatt(fid, file.path(hdf5_location, "SpotLocation"), "Header")
x <- spot_locations[, "CenterX"]
y <- spot_locations[, "CenterY"]
# Coordinates of segmentation boundaries (cells and nuclei)
cell_mask <- h5read(fid, file.path(hdf5_location, "CellBoundary"))
colnames(cell_mask) <- h5readatt(fid, file.path(hdf5_location, "CellBoundary"), "Header")
nucleus_mask <- h5read(fid, file.path(hdf5_location, "NucleusBoundary"))
colnames(nucleus_mask) <- h5readatt(fid, file.path(hdf5_location, "NucleusBoundary"), "Header")
# Cell trace images
celltrace <- h5read(fid, file.path(hdf5_location, "Celltrace"))
## Create spatstat objects
## -----------------------
# Create point pattern object
X[[group]] <- X[[group]] <- ppp(x, y, window=owin(poly=cell_mask))
unitname(X[[group]]) <- c("pixel", "pixels")
# Create window object using the cell outline
cells[[group]] <- owin(poly=cell_mask)
# Create tessellation object for subcellular compartments
nuclei[[group]] <- owin(poly=nucleus_mask)
cytoplasms[[group]] <- setminus.owin(cells[[group]], nuclei[[group]])
compartments[[group]] <- tess(tiles=list(nucleus=nuclei[[group]], cytoplasm=cytoplasms[[group]]), window=cells[[group]])
## Create image object for celltrace stain
celltraces[[group]] <- im(celltrace)
## Store cell index
cellid[group] <- as.integer(gsub("/Cell_([0-9]+)$", '\\1', hdf5_location))
## Store cell features
formfactor[group] <- h5read(fid, file.path(hdf5_location, "FormFactor"))
eccentricity[group] <- h5read(fid, file.path(hdf5_location, "Eccentricity"))
solidity[group] <- h5read(fid, file.path(hdf5_location, "Solidity"))
}
out <- list(X=X, cells=cells, nuclei=nuclei, cytoplasms=cytoplasms, compartments=compartments,
celltraces=celltraces,
formfactor=formfactor, eccentricity=eccentricity, solidity=solidity,
wellid=wellid, cellid=cellid)
cat(sprintf("lsd: %d cells loaded\n", length(out$X)))
return(out)
H5Fclose(fid)
}
# Define the gene
wellid <- "T102r1aaR07C04"
# Load the training dataset
nTrain <- 50
hdf5_file <- file.path(repo_path, "preprocessed", sprintf("%s.h5", wellid))
trainingset <- lsd(hdf5_file, nTrain)
#' Load spot data. Loads preprocessed data from HDF5 file and creates corresponding spatstat objects.
#'
#' @param hdf5_file A string of the absolute path to the HDF5 file.
#' @param n Integer specifying the number of cells that should be loaded.
#' @return A list containing all the relevant spatstat objects for fitting an mppm model.
lsd <- function(hdf5_file, n=NULL) {
require(rhdf5)
require(spatstat)
source(file.path(dirname(dirname(hdf5_file)), "code", "h5readatt.R"))
wellid <- gsub(".*/([^/]+)\\.h5$", '\\1', hdf5_file)
fid <- H5Fopen(hdf5_file)
# List groups in HDF5 file
hdf5_groups <- unique(h5ls(fid, datasetinfo=FALSE)[1])
# Get indices of relevant groups (those which contain the datasets of interest)
group_index <- sapply(hdf5_groups, function(x) grep("/Cell", x), simplify=TRUE)
hdf5_groups <- hdf5_groups[group_index]
if (is.null(n)) {
# Permute
cell_index <-  sample(1:length(hdf5_groups))
cat(sprintf("lsd: loading all %d cells for gene \'%s\': \n", length(cell_index), wellid))
}
else {
# Sample
cell_index <- sample(length(hdf5_groups), n)
cat(sprintf("lsd: loading %d randomly sampled cells for gene \'%s\': \n", length(cell_index), wellid))
}
hdf5_groups <- hdf5_groups[cell_index]
cells <- nuclei <- cytoplasms <- compartments <- X <- celltraces <- vector("list", length(hdf5_groups))
cellid <- formfactor <- eccentricity <- solidity <- vector("numeric", length(hdf5_groups))
for (group in 1:length(hdf5_groups)) {
## Load spot data form HDF5 file
## -----------------------------
hdf5_location <- hdf5_groups[group]
cat(sprintf("lsd: loading \'%s\' \n", hdf5_location))
# Coordinates of spots
spot_locations <- h5read(fid, file.path(hdf5_location, "SpotLocation"))
colnames(spot_locations) <- h5readatt(fid, file.path(hdf5_location, "SpotLocation"), "Header")
x <- spot_locations[, "CenterX"]
y <- spot_locations[, "CenterY"]
# Coordinates of segmentation boundaries (cells and nuclei)
cell_mask <- h5read(fid, file.path(hdf5_location, "CellBoundary"))
colnames(cell_mask) <- h5readatt(fid, file.path(hdf5_location, "CellBoundary"), "Header")
nucleus_mask <- h5read(fid, file.path(hdf5_location, "NucleusBoundary"))
colnames(nucleus_mask) <- h5readatt(fid, file.path(hdf5_location, "NucleusBoundary"), "Header")
# Cell trace images
celltrace <- h5read(fid, file.path(hdf5_location, "Celltrace"))
## Create spatstat objects
## -----------------------
# Create point pattern object
X[[group]] <- X[[group]] <- ppp(x, y, window=owin(poly=cell_mask))
unitname(X[[group]]) <- c("pixel", "pixels")
# Create window object using the cell outline
cells[[group]] <- owin(poly=cell_mask)
# Create tessellation object for subcellular compartments
nuclei[[group]] <- owin(poly=nucleus_mask)
cytoplasms[[group]] <- setminus.owin(cells[[group]], nuclei[[group]])
compartments[[group]] <- tess(tiles=list(nucleus=nuclei[[group]], cytoplasm=cytoplasms[[group]]), window=cells[[group]])
## Create image object for celltrace stain
celltraces[[group]] <- im(celltrace)
## Store cell index
cellid[group] <- as.integer(gsub("/Cell_([0-9]+)$", '\\1', hdf5_location))
## Store cell features
formfactor[group] <- h5read(fid, file.path(hdf5_location, "FormFactor"))
eccentricity[group] <- h5read(fid, file.path(hdf5_location, "Eccentricity"))
solidity[group] <- h5read(fid, file.path(hdf5_location, "Solidity"))
}
out <- list(X=X, cells=cells, nuclei=nuclei, cytoplasms=cytoplasms, compartments=compartments,
celltraces=celltraces,
formfactor=formfactor, eccentricity=eccentricity, solidity=solidity,
wellid=wellid, cellid=cellid)
cat(sprintf("lsd: %d cells loaded\n", length(out$X)))
return(out)
H5Fclose(fid)
}
# Define the gene
wellid <- "T102r1aaR07C04"
# Load the training dataset
nTrain <- 50
hdf5_file <- file.path(repo_path, "preprocessed", sprintf("%s.h5", wellid))
trainingset <- lsd(hdf5_file, nTrain)
# Provide path to local copy of repository
repo_path <- "/Users/Markus/Documents/PointPatternModels"
#' Load spot data. Loads preprocessed data from HDF5 file and creates corresponding spatstat objects.
#'
#' @param hdf5_file A string of the absolute path to the HDF5 file.
#' @param n Integer specifying the number of cells that should be loaded.
#' @return A list containing all the relevant spatstat objects for fitting an mppm model.
lsd <- function(hdf5_file, n=NULL) {
require(rhdf5)
require(spatstat)
source(file.path(dirname(dirname(hdf5_file)), "code", "h5readatt.R"))
wellid <- gsub(".*/([^/]+)\\.h5$", '\\1', hdf5_file)
fid <- H5Fopen(hdf5_file)
# List groups in HDF5 file
hdf5_groups <- unique(h5ls(fid, datasetinfo=FALSE)[1])
# Get indices of relevant groups (those which contain the datasets of interest)
group_index <- sapply(hdf5_groups, function(x) grep("/Cell", x), simplify=TRUE)
hdf5_groups <- hdf5_groups[group_index]
if (is.null(n)) {
# Permute
cell_index <-  sample(1:length(hdf5_groups))
cat(sprintf("lsd: loading all %d cells for gene \'%s\': \n", length(cell_index), wellid))
}
else {
# Sample
cell_index <- sample(length(hdf5_groups), n)
cat(sprintf("lsd: loading %d randomly sampled cells for gene \'%s\': \n", length(cell_index), wellid))
}
hdf5_groups <- hdf5_groups[cell_index]
cells <- nuclei <- cytoplasms <- compartments <- X <- celltraces <- vector("list", length(hdf5_groups))
cellid <- formfactor <- eccentricity <- solidity <- vector("numeric", length(hdf5_groups))
for (group in 1:length(hdf5_groups)) {
## Load spot data form HDF5 file
## -----------------------------
hdf5_location <- hdf5_groups[group]
cat(sprintf("lsd: loading \'%s\' \n", hdf5_location))
# Coordinates of spots
spot_locations <- h5read(fid, file.path(hdf5_location, "SpotLocation"))
colnames(spot_locations) <- h5readatt(fid, file.path(hdf5_location, "SpotLocation"), "Header")
x <- spot_locations[, "CenterX"]
y <- spot_locations[, "CenterY"]
# Coordinates of segmentation boundaries (cells and nuclei)
cell_mask <- h5read(fid, file.path(hdf5_location, "CellBoundary"))
colnames(cell_mask) <- h5readatt(fid, file.path(hdf5_location, "CellBoundary"), "Header")
nucleus_mask <- h5read(fid, file.path(hdf5_location, "NucleusBoundary"))
colnames(nucleus_mask) <- h5readatt(fid, file.path(hdf5_location, "NucleusBoundary"), "Header")
# Cell trace images
celltrace <- h5read(fid, file.path(hdf5_location, "Celltrace"))
## Create spatstat objects
## -----------------------
# Create point pattern object
X[[group]] <- X[[group]] <- ppp(x, y, window=owin(poly=cell_mask))
unitname(X[[group]]) <- c("pixel", "pixels")
# Create window object using the cell outline
cells[[group]] <- owin(poly=cell_mask)
# Create tessellation object for subcellular compartments
nuclei[[group]] <- owin(poly=nucleus_mask)
cytoplasms[[group]] <- setminus.owin(cells[[group]], nuclei[[group]])
compartments[[group]] <- tess(tiles=list(nucleus=nuclei[[group]], cytoplasm=cytoplasms[[group]]), window=cells[[group]])
## Create image object for celltrace stain
celltraces[[group]] <- im(celltrace)
## Store cell index
cellid[group] <- as.integer(gsub("/Cell_([0-9]+)$", '\\1', hdf5_location))
## Store cell features
formfactor[group] <- h5read(fid, file.path(hdf5_location, "FormFactor"))
eccentricity[group] <- h5read(fid, file.path(hdf5_location, "Eccentricity"))
solidity[group] <- h5read(fid, file.path(hdf5_location, "Solidity"))
}
out <- list(X=X, cells=cells, nuclei=nuclei, cytoplasms=cytoplasms, compartments=compartments,
celltraces=celltraces,
formfactor=formfactor, eccentricity=eccentricity, solidity=solidity,
wellid=wellid, cellid=cellid)
cat(sprintf("lsd: %d cells loaded\n", length(out$X)))
return(out)
H5Fclose(fid)
}
# Define the gene
wellid <- "T102r1aaR07C04"
# Load the training dataset
nTrain <- 50
hdf5_file <- file.path(repo_path, "preprocessed", sprintf("%s.h5", wellid))
trainingset <- lsd(hdf5_file, nTrain)
model <- "compartment + distance2nucleus + distance2membrane + celltrace + area + protein + solidity + formfactor"
wellid <- trainingset$wellid
# Randomly sample cells from training set
nCells <- length(trainingset$cellid)
nSample <- 9
ix_sampled <- sample(length(trainingset$X), nSample, replace=FALSE)
# Visualize the sampled cells
layout(matrix(1:9, 3, 3, byrow=TRUE))
par(mar=c(0.5,0.5,0.5,0.5))
for (s in ix_sampled) {
plot(trainingset$X[[s]], cols="#009900", main=s)
plot(trainingset$cytoplasms[[s]], add=TRUE)
}
# Optimize parameter 'r' for the model
r_range <- data.frame(r=seq(0.5, 20, by=0.5)) # range of possible parameter values
r <- as.numeric(matrix(data=NA, nrow=1, ncol=length(ix_sampled)))
for (j in 1:length(ix_sampled)) {
# There is a bug that breaks the optimization for some cells
r[j] <- tryCatch(profilepl(r_range, trainingset$X[[ix_sampled[j]]],
trend=as.formula(paste("~", model, sep=" ")),
data=get.covariates.ppm(trainingset, ix_sampled[j]),
f=AreaInter,
connection="none",
verbose=FALSE),
error=function(cond) {return(NA)})
if (! is.na(r[j])) {
cat(sprintf("Optimal 'r' value for cell %d is %.1f\n", ix_sampled, r[j]))
}
}
# Take the medium of the individual values (less prone to outliers than mean)
r <- median(r, na.rm=TRUE)
r
ix_sampled
for (j in 1:length(ix_sampled)) {
# There is a bug that breaks the optimization for some cells
r[j] <- tryCatch(profilepl(r_range, trainingset$X[[ix_sampled[j]]],
trend=as.formula(paste("~", model, sep=" ")),
data=get.covariates.ppm(trainingset, ix_sampled[j]),
f=AreaInter,
connection="none",
verbose=FALSE),
error=function(cond) {return(NA)})
if (! is.na(r[j])) {
cat(sprintf("Optimal 'r' value for cell %d is %.1f\n", ix_sampled, r[j]))
}
}
profilepl(r_range, trainingset$X[[ix_sampled[j]]],
trend=as.formula(paste("~", model, sep=" ")),
data=get.covariates.ppm(trainingset, ix_sampled[j]),
f=AreaInter,
connection="none",
verbose=FALSE)
#' Get covariates for ppm. Combines covariates into a list for use with ppm models.
#'
#' @param object A list containing the spatstat objects that should be combined.
#' @param index An integer or list specifying the index for object.
#' @return A list of covariates as argument for ppm.
get.covariates.ppm <- function(object, index) {
list(compartment=as.im(object$compartments[[index]]),
distance2nucleus=dist2nucleus(object$nuclei[[index]], object$cells[[index]]),
distance2membrane=dist2membrane(object$cells[[index]]),
celltrace=object$celltraces[[index]],
area=area.owin(object$cells[[index]]),
protein=sum(object$celltraces[[index]]),
solidity=object$solidity[index],
formfactor=object$formfactor[index],
eccentricity=object$eccentricity[index])
}
profilepl(r_range, trainingset$X[[ix_sampled[j]]],
trend=as.formula(paste("~", model, sep=" ")),
data=get.covariates.ppm(trainingset, ix_sampled[j]),
f=AreaInter,
connection="none",
verbose=FALSE)
library(spatstat)
source(file.path(Sys.getenv("HOME"), "Jterator/src/r/jterator/api/io.R"))
file.path(Sys.getenv("HOME"), "Jterator/src/r/jterator/api/io.R")
source("/Users/Markus/Jterator/src/r/jterator/api/io.R")
file.path(Sys.getenv("HOME"), "Documents/Jterator/src/r/jterator/api/io.R")
source(file.path(Sys.getenv("HOME"), "Documents/Jterator/src/r/jterator/api/io.R"))
library(jterator)
ls
setwd("jterator")
document()
library(devtools)
library(roxygen2)
document()
library(jterator)
setwd("..")
install("jterator")
?gethandles
library(jterator)
?gethandles
library(yaml)
?yaml.load_file
data <- list()
data[['Lm_Area_Intensity']] <- 1:3
names(data)
for (key in names(data)) print(key)
library(devtools)
library(roxygen2)
setwd("/Users/Markus/Documents/Jterator/src/r/jterator/")
document()
setwd("..")
install("jterator")
library(jterator)
library(rhdf5)
?h5createDataset
?h5createGroup
round(1:10)
integer(round(1:10))
int(round(1:10))
as.integer(round(1:10))
?round
round(2.7)
?cor
test = list()
for (key in names(test)) print key
for (key in names(test)) print(key)
