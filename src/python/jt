#!/usr/bin/env python
'''
Command-line interface for Jterator.

Copyright (c) 2014 Yauhen Yakimovich, Markus Herrmann

Licensed under the MIT License (MIT). Read a copy of LICENSE distributed with
this code.

See README and project page at https://github.com/HackerMD/Jterator
'''
import os
import sys
import argparse
import logging
import shutil
from functools import partial
import jterator
from jterator.runner import JteratorRunner
from jterator.error import JteratorError
from jterator.checker import JteratorCheck
from jterator.logging_util import map_log_verbosity


LOGO = '''
   _ _                 _
  (_) |               | |
   _| |_ ___ _ __ __ _| |_ ___  _ __
  | | __/ _ \ '__/ _` | __/ _ \| '__|
  | | ||  __/ | | (_| | || (_) | |
  | |\__\___|_|  \__,_|\__\___/|_|
 _/ |
|__/    https://github.com/HackerMD/Jterator (ver. %(version)s)
'''


class MissingCliArgs(JteratorError):
    '''Malformed arguments provided in the command-line.'''


class JteratorCli(object):
    logger = logging.getLogger(__name__)

    def __init__(self, args):
        self.args = args
        # Map verbosity level defined by number to the logging level.
        self.logging_level = map_log_verbosity(args.verbosity)
        self.print_logo_and_prompt()

    def print_logo_and_prompt(self):
        vars = {'version': jterator.__version__}
        print LOGO % vars

    def create(self):
        '''
        Create a project based on a project folder skeleton.
        '''
        if os.path.exists(self.args.skel):
            repo_content = os.listdir(self.args.skel)
            for folder in repo_content:
                if folder in ['skeleton']:
                    folder_path = os.path.join(self.args.skel, folder)
                    shutil.copytree(folder_path, self.args.path)
                    print(folder)

    def joblist(self):
        '''
        Create a list of jobs for parallel computing.
        '''
        jt = JteratorRunner(logging_level=self.logging_level,
                            pipeline_folder_path=self.args.path)
        jt.description
        jt.create_job_list()

    def run(self):
        '''
        Run Jterator pipe if it is found in the current working folder.
        '''
        jt = JteratorRunner(logging_level=self.logging_level,
                            pipeline_folder_path=self.args.path)
        jt.run_pipeline(self.args.job)

    def check(self):
        '''
        Check pipeline and handles descriptor files.
        '''
        jt = JteratorRunner(logging_level=self.logging_level,
                            pipeline_folder_path=self.args.path)
        jt.description
        jt.init_hdf5_files()
        checker = JteratorCheck(jt.description, jt.tmp_filename)
        checker.check_pipeline()
        checker.check_handles()
        checker.check_pipeline_io()

    @staticmethod
    def process_commands(args, subparser):
        cli = JteratorCli(args)
        if subparser.prog == 'jt create':
            cli.create()
        elif subparser.prog == 'jt run':
            cli.run()
        elif subparser.prog == 'jt joblist':
            cli.joblist()
        elif subparser.prog == 'jt check':
            cli.check()
        else:
            subparser.print_help()


class ArgumentParser(argparse.ArgumentParser):

    def error(self, message):
        self.print_help(sys.stderr)
        self.exit(2, '%s: error: %s\n' % (self.prog, message))


if __name__ == '__main__':
    parser = ArgumentParser(description='Command-line interface for Jterator.')
    parser.add_argument('--version', action='version',
                        version='%(prog)s ' + jterator.__version__,
                        help='Display version')
    # Note that by default the verbosity is not set == `no logging`, minimal
    # logging level requires at least  a single '-v'. More 'v's results in
    # greater verbosity
    parser.add_argument('-v', '--verbosity', action='count', default=0,
                        help='increase logging verbosity (-v WARN, -vv INFO \
                                                          -vvv DEBUG)')
    # parser.add_argument('-i', '--interactive', action='store_true',
    #                     default=False)

    subparsers = parser.add_subparsers()

    # 'jt create' parser
    create_command_parser = subparsers.add_parser('create',
                                                  help='create a new project based on a "skeleton"')
    create_command_parser.add_argument('path', default=os.getcwd(),
                                       nargs='?', type=str)
    create_command_parser.add_argument('--skel', type=str)
    create_command_parser.set_defaults(handler=partial(
        JteratorCli.process_commands, subparser=create_command_parser))

    # 'jt joblist' parser
    joblist_command_parser = subparsers.add_parser('joblist',
                                                   help='create a list of jobs for parallel computing')
    joblist_command_parser.add_argument('path', default=os.getcwd(),
                                        nargs='?', type=str)
    joblist_command_parser.set_defaults(handler=partial(
        JteratorCli.process_commands, subparser=joblist_command_parser))

    # 'jt check' parser
    check_command_parser = subparsers.add_parser('check',
                                                 help='check pipeline and handles descriptor files')
    check_command_parser.add_argument('path', default=os.getcwd(),
                                      nargs='?', type=str)
    check_command_parser.set_defaults(handler=partial(
        JteratorCli.process_commands, subparser=check_command_parser))

    # 'jt run' parser
    run_command_parser = subparsers.add_parser('run',
                                               help='run pipeline')
    run_command_parser.add_argument('path', default=os.getcwd(),
                                    nargs='?', type=str)
    run_command_parser.add_argument('--job', default=None, type=int)
    run_command_parser.set_defaults(handler=partial(
        JteratorCli.process_commands, subparser=run_command_parser))

    # Parse arguments.
    args = parser.parse_args()

    # On error this will print help and cause exit with explanation message.
    # is_interactive = args.interactive

    # Configure logging.
    # if is_interactive:
    #     set_interactive_logging(args.verbosity)


    try:
        if args.handler:
            args.handler(args)
        else:
            parser.print_help()
    except JteratorError as error:
        sys.stdout.write('Failed. ')
        if type(error) is MissingCliArgs:
            print 'Missing one of the required command-line arguments.'
        print 'Error message: "%s"' % str(error)
